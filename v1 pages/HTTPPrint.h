/*********************************************************************
 * FileName: HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * Processor: PIC18,PIC24E, PIC24F, PIC24H, dsPIC30F, dsPIC33F, dsPIC33E,PIC32
 * Compiler:  Microchip C18, C30, C32
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 *
 * Software License Agreement
 *
 * Copyright (C) 2012 Microchip Technology Inc.  All rights
 * reserved.
 *
 * Microchip licenses to you the right to use, modify, copy, and 
  * distribute: 
 * (i)  the Software when embedded on a Microchip microcontroller or 
 *      digital signal controller product ("Device") which is 
 *      integrated into Licensee's product; or 
 * (ii) ONLY the Software driver source files ENC28J60.c, ENC28J60.h,
 *		ENCX24J600.c and ENCX24J600.h ported to a non-Microchip device
 *		used in conjunction with a Microchip ethernet controller for
 *		the sole purpose of interfacing with the ethernet controller.
 *
 * You should refer to the license agreement accompanying this 
 * Software for additional information regarding your rights and 
 * obligations.
 *
 * THE SOFTWARE AND DOCUMENTATION ARE PROVIDED "AS IS" WITHOUT
 * WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
 * LIMITATION, ANY WARRANTY OF MERCHANTABILITY, FITNESS FOR A 
 * PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT SHALL
 * MICROCHIP BE LIABLE FOR ANY INCIDENTAL, SPECIAL, INDIRECT OR
 * CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF
 * PROCUREMENT OF SUBSTITUTE GOODS, TECHNOLOGY OR SERVICES, ANY CLAIMS
 * BY THIRD PARTIES (INCLUDING BUT NOT LIMITED TO ANY DEFENSE 
 * THEREOF), ANY CLAIMS FOR INDEMNITY OR CONTRIBUTION, OR OTHER 
 * SIMILAR COSTS, WHETHER ASSERTED ON THE BASIS OF CONTRACT, TORT
 * (INCLUDING NEGLIGENCE), BREACH OF WARRANTY, OR OTHERWISE.
 *
 *********************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_time(void);
void HTTPPrint_temp(void);
void HTTPPrint_sync(void);
void HTTPPrint_dat(WORD);
void HTTPPrint_led(WORD);
void HTTPPrint_config_hostname(void);
void HTTPPrint_version(void);
void HTTPPrint_edesID(void);
void HTTPPrint_zadgps(void);
void HTTPPrint_zadntp(void);
void HTTPPrint_rl14(void);
void HTTPPrint_checkSincronization(void);
void HTTPPrint_gString(void);
void HTTPPrint_config_mac(void);
void HTTPPrint_config_dhcpchecked(void);
void HTTPPrint_config_ip(void);
void HTTPPrint_config_gw(void);
void HTTPPrint_config_subnet(void);
void HTTPPrint_config_dns1(void);
void HTTPPrint_config_dns2(void);
void HTTPPrint_hellomsg(void);
void HTTPPrint_date(void);
void HTTPPrint_relay(void);
void HTTPPrint_ien(void);
void HTTPPrint_impulse(void);
void HTTPPrint_imp(WORD);
void HTTPPrint_tim(WORD);
void HTTPPrint_lin(void);
void HTTPPrint_lopwrEn(WORD);
void HTTPPrint_lopwrIn(WORD);
void HTTPPrint_lopwrBe(WORD);
void HTTPPrint_lopwrFrom(void);
void HTTPPrint_lopwrTo(void);
void HTTPPrint_ntp_is(void);
void HTTPPrint_gps_is(void);
void HTTPPrint_ntp_en(void);
void HTTPPrint_ntp_ip(void);
void HTTPPrint_ntp_port(void);
void HTTPPrint_reboot(void);
void HTTPPrint_rebootaddr(void);
void HTTPPrint_cloSel(WORD,WORD);
void HTTPPrint_tempSel(WORD);
void HTTPPrint_tempStatic(void);
void HTTPPrint_humidSel(WORD);
void HTTPPrint_humidStatic(void);
void HTTPPrint_uconf(void);
void HTTPPrint_iconf(WORD);
void HTTPPrint_zadman(void);
void HTTPPrint_rtim(void);
void HTTPPrint_nbat(void);
void HTTPPrint_nnap(void);
void HTTPPrint_bnap(void);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPPrint_time();
			break;
        case 0x00000001:
			HTTPPrint_temp();
			break;
        case 0x00000002:
			HTTPPrint_sync();
			break;
        case 0x00000003:
			HTTPPrint_dat(0);
			break;
        case 0x00000004:
			HTTPPrint_dat(1);
			break;
        case 0x00000005:
			HTTPPrint_dat(2);
			break;
        case 0x00000006:
			HTTPPrint_dat(3);
			break;
        case 0x00000007:
			HTTPPrint_dat(4);
			break;
        case 0x00000008:
			HTTPPrint_dat(5);
			break;
        case 0x00000009:
			HTTPPrint_led(0);
			break;
        case 0x0000000a:
			HTTPPrint_led(1);
			break;
        case 0x0000000b:
			HTTPPrint_led(2);
			break;
        case 0x0000000c:
			HTTPPrint_led(3);
			break;
        case 0x0000000d:
			HTTPPrint_config_hostname();
			break;
        case 0x0000000e:
			HTTPPrint_version();
			break;
        case 0x0000000f:
			HTTPPrint_edesID();
			break;
        case 0x00000010:
			HTTPPrint_zadgps();
			break;
        case 0x00000011:
			HTTPPrint_zadntp();
			break;
        case 0x00000012:
			HTTPPrint_rl14();
			break;
        case 0x00000013:
			HTTPPrint_checkSincronization();
			break;
        case 0x00000014:
			HTTPPrint_gString();
			break;
        case 0x00000015:
			HTTPPrint_config_mac();
			break;
        case 0x00000016:
			HTTPPrint_config_dhcpchecked();
			break;
        case 0x00000017:
			HTTPPrint_config_ip();
			break;
        case 0x00000018:
			HTTPPrint_config_gw();
			break;
        case 0x00000019:
			HTTPPrint_config_subnet();
			break;
        case 0x0000001a:
			HTTPPrint_config_dns1();
			break;
        case 0x0000001b:
			HTTPPrint_config_dns2();
			break;
        case 0x0000001c:
			HTTPPrint_hellomsg();
			break;
        case 0x0000001d:
			HTTPPrint_date();
			break;
        case 0x0000001e:
			HTTPPrint_relay();
			break;
        case 0x0000001f:
			HTTPPrint_ien();
			break;
        case 0x00000020:
			HTTPPrint_impulse();
			break;
        case 0x00000021:
			HTTPPrint_imp(1);
			break;
        case 0x00000022:
			HTTPPrint_imp(2);
			break;
        case 0x00000023:
			HTTPPrint_imp(3);
			break;
        case 0x00000024:
			HTTPPrint_imp(4);
			break;
        case 0x00000025:
			HTTPPrint_imp(5);
			break;
        case 0x00000026:
			HTTPPrint_imp(6);
			break;
        case 0x00000027:
			HTTPPrint_imp(7);
			break;
        case 0x00000028:
			HTTPPrint_imp(8);
			break;
        case 0x00000029:
			HTTPPrint_tim(1);
			break;
        case 0x0000002a:
			HTTPPrint_tim(2);
			break;
        case 0x0000002b:
			HTTPPrint_tim(3);
			break;
        case 0x0000002c:
			HTTPPrint_tim(4);
			break;
        case 0x0000002d:
			HTTPPrint_tim(5);
			break;
        case 0x0000002e:
			HTTPPrint_tim(6);
			break;
        case 0x0000002f:
			HTTPPrint_tim(7);
			break;
        case 0x00000030:
			HTTPPrint_tim(8);
			break;
        case 0x00000031:
			HTTPPrint_lin();
			break;
        case 0x00000032:
			HTTPIncFile((ROM BYTE*)"header.inc");
			break;
        case 0x00000033:
			HTTPPrint_lopwrEn(0);
			break;
        case 0x00000034:
			HTTPPrint_lopwrEn(1);
			break;
        case 0x00000035:
			HTTPPrint_lopwrIn(0);
			break;
        case 0x00000036:
			HTTPPrint_lopwrIn(1);
			break;
        case 0x00000037:
			HTTPPrint_lopwrIn(2);
			break;
        case 0x00000038:
			HTTPPrint_lopwrIn(3);
			break;
        case 0x00000039:
			HTTPPrint_lopwrIn(4);
			break;
        case 0x0000003a:
			HTTPPrint_lopwrIn(5);
			break;
        case 0x0000003b:
			HTTPPrint_lopwrIn(6);
			break;
        case 0x0000003c:
			HTTPPrint_lopwrIn(7);
			break;
        case 0x0000003d:
			HTTPPrint_lopwrIn(8);
			break;
        case 0x0000003e:
			HTTPPrint_lopwrIn(9);
			break;
        case 0x0000003f:
			HTTPPrint_lopwrIn(10);
			break;
        case 0x00000040:
			HTTPPrint_lopwrBe(0);
			break;
        case 0x00000041:
			HTTPPrint_lopwrBe(1);
			break;
        case 0x00000042:
			HTTPPrint_lopwrFrom();
			break;
        case 0x00000043:
			HTTPPrint_lopwrTo();
			break;
        case 0x00000044:
			HTTPIncFile((ROM BYTE*)"footer.inc");
			break;
        case 0x00000045:
			HTTPPrint_ntp_is();
			break;
        case 0x00000046:
			HTTPPrint_gps_is();
			break;
        case 0x00000047:
			HTTPPrint_ntp_en();
			break;
        case 0x00000048:
			HTTPPrint_ntp_ip();
			break;
        case 0x00000049:
			HTTPPrint_ntp_port();
			break;
        case 0x0000004a:
			HTTPPrint_reboot();
			break;
        case 0x0000004b:
			HTTPPrint_rebootaddr();
			break;
        case 0x0000004c:
			HTTPPrint_cloSel(5,0);
			break;
        case 0x0000004d:
			HTTPPrint_cloSel(5,1);
			break;
        case 0x0000004e:
			HTTPPrint_cloSel(6,32);
			break;
        case 0x0000004f:
			HTTPPrint_cloSel(6,31);
			break;
        case 0x00000050:
			HTTPPrint_cloSel(6,30);
			break;
        case 0x00000051:
			HTTPPrint_cloSel(6,29);
			break;
        case 0x00000052:
			HTTPPrint_cloSel(6,28);
			break;
        case 0x00000053:
			HTTPPrint_cloSel(6,27);
			break;
        case 0x00000054:
			HTTPPrint_cloSel(6,26);
			break;
        case 0x00000055:
			HTTPPrint_cloSel(6,25);
			break;
        case 0x00000056:
			HTTPPrint_cloSel(6,24);
			break;
        case 0x00000057:
			HTTPPrint_cloSel(6,23);
			break;
        case 0x00000058:
			HTTPPrint_cloSel(6,22);
			break;
        case 0x00000059:
			HTTPPrint_cloSel(6,21);
			break;
        case 0x0000005a:
			HTTPPrint_cloSel(6,0);
			break;
        case 0x0000005b:
			HTTPPrint_cloSel(6,1);
			break;
        case 0x0000005c:
			HTTPPrint_cloSel(6,2);
			break;
        case 0x0000005d:
			HTTPPrint_cloSel(6,3);
			break;
        case 0x0000005e:
			HTTPPrint_cloSel(6,4);
			break;
        case 0x0000005f:
			HTTPPrint_cloSel(6,5);
			break;
        case 0x00000060:
			HTTPPrint_cloSel(6,6);
			break;
        case 0x00000061:
			HTTPPrint_cloSel(6,7);
			break;
        case 0x00000062:
			HTTPPrint_cloSel(6,8);
			break;
        case 0x00000063:
			HTTPPrint_cloSel(6,9);
			break;
        case 0x00000064:
			HTTPPrint_cloSel(6,10);
			break;
        case 0x00000065:
			HTTPPrint_cloSel(6,11);
			break;
        case 0x00000066:
			HTTPPrint_cloSel(6,12);
			break;
        case 0x00000067:
			HTTPPrint_cloSel(6,13);
			break;
        case 0x00000068:
			HTTPPrint_cloSel(6,14);
			break;
        case 0x00000069:
			HTTPPrint_tempSel(0);
			break;
        case 0x0000006a:
			HTTPPrint_tempSel(1);
			break;
        case 0x0000006b:
			HTTPPrint_tempStatic();
			break;
        case 0x0000006c:
			HTTPPrint_humidSel(0);
			break;
        case 0x0000006d:
			HTTPPrint_humidSel(1);
			break;
        case 0x0000006e:
			HTTPPrint_humidStatic();
			break;
        case 0x0000006f:
			HTTPPrint_uconf();
			break;
        case 0x00000070:
			HTTPPrint_iconf(1);
			break;
        case 0x00000071:
			HTTPPrint_iconf(2);
			break;
        case 0x00000072:
			HTTPPrint_iconf(3);
			break;
        case 0x00000073:
			HTTPPrint_iconf(4);
			break;
        case 0x00000074:
			HTTPPrint_iconf(5);
			break;
        case 0x00000075:
			HTTPPrint_iconf(6);
			break;
        case 0x00000076:
			HTTPPrint_iconf(7);
			break;
        case 0x00000077:
			HTTPPrint_iconf(8);
			break;
        case 0x00000078:
			HTTPPrint_zadman();
			break;
        case 0x00000079:
			HTTPPrint_rtim();
			break;
        case 0x0000007a:
			HTTPPrint_nbat();
			break;
        case 0x0000007b:
			HTTPPrint_nnap();
			break;
        case 0x0000007c:
			HTTPPrint_bnap();
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
